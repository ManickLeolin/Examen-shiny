[{"name":"app.R","content":"library(shiny)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DT)\nlibrary(bslib)\nlibrary(thematic)\nlibrary(plotly)\n\ndata(\"diamonds\")\n\nthematic_shiny()\n\nui <- fluidPage(\n  theme = bs_theme(version = 5, bootswatch = \"quartz\"),\n  titlePanel(\"Exploration des Diamants\"),\n  sidebarLayout(\n    sidebarPanel(\n      h2(\"Filtres\"),\n      sliderInput(\n        inputId = \"Price\",\n        label = \"Prix des Diamants\",\n        min = min(diamonds$price),\n        max = max(diamonds$price),\n        value = c(min(diamonds$price),5000),\n        step = 100,\n        pre = \"$\",  # Affichage en format monétaire\n        sep = \",\"\n      ),\n      selectInput(\n        inputId = \"color\",\n        label = \"Choisir une couleur\",\n        choices = c(\"Toutes\",sort(unique(as.character(diamonds$color)))), \n        selected = \"Toutes\"\n      )\n    ),\n    mainPanel(\n      plotlyOutput(outputId = \"DiamondPlot\"), \n      DTOutput(outputId = \"DiamondTable\")\n    )\n  )\n)\n\n\nserver <- function(input, output, session) {\n  \n  # Vérifier ce que contient la colonne \"color\"\n  observe({\n    print(unique(diamonds$color))  # Debugging pour voir les vraies valeurs\n  })\n  # Notification lors du changement de filtre\n  observeEvent(input$Price, {\n    showNotification(\n      paste(\"Filtrage par prix :\", input$Price[1], \"à\", input$Price[2]),\n      type = \"message\",\n      duration = 3\n    )\n  })\n  \n  observeEvent(input$color, {\n    showNotification(\n      paste(\"Couleur sélectionnée :\", input$color),\n      type = \"message\",\n      duration = 3\n    )\n  })\n  \n  \n  # Filtrer les données en fonction du prix et de la couleur\n  filtered_data <- reactive({\n    data <- diamonds %>%\n      filter(price >= input$Price[1], price <= input$Price[2])\n    \n    if (input$color != \"Toutes\") {\n      data <- data %>% filter(color == input$color)  \n    }\n    \n    return(data)\n  })\n  \n  # Table interactive\n  output$DiamondTable <- renderDT({\n    req(filtered_data()) \n    datatable(filtered_data())\n  })\n  \n  # Graphique interactif\n  output$DiamondPlot <- renderPlotly({\n    req(filtered_data())\n    \n    p <- ggplot(filtered_data(), aes(x = carat, y = price)) +\n      geom_point(alpha = 0.7, color = \"blue\") +  \n      labs(\n        title = paste(\"Diamants - Couleur:\", input$color),\n        x = \"Carats\",\n        y = \"Prix ($)\"\n      ) +\n      theme_minimal()\n    \n    ggplotly(p)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n","type":"text"},{"name":"Examen shiny.R","content":"usethis::use_git_config(\n  scope = \"user\",\n  user.name = \"ManickLeolin\",\n  user.email = \"manicleolin2@gmail.com\",\n  init.defaultbranch = \"main\"\n)\ninstall.packages(\"shiny\")\nlibrary(shiny)","type":"text"},{"name":"Examen-shiny/app.R","content":"usethis::use_git_config(\n  scope = \"user\",\n  user.name = \"ManickLeolin\",\n  user.email = \"manicleolin2@gmail.com\",\n  init.defaultbranch = \"main\"\n)\ninstall.packages(\"shiny\")\nlibrary(shiny)\n\n\n\n","type":"text"},{"name":"Examen-shiny/Examen shiny.R","content":"library(shiny)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DT)\nlibrary(bslib)\nlibrary(thematic)\nlibrary(plotly)\n\ndata(\"diamonds\")\n\nthematic_shiny()\n\nui <- fluidPage(\n  theme = bs_theme(version = 5, bootswatch = \"quartz\"),\n  titlePanel(\"Exploration des Diamants\"),\n  sidebarLayout(\n    sidebarPanel(\n      h2(\"Filtres\"),\n      sliderInput(\n        inputId = \"Price\",\n        label = \"Prix des Diamants\",\n        min = min(diamonds$price),\n        max = max(diamonds$price),\n        value = c(min(diamonds$price),5000),\n        step = 100,\n        pre = \"$\",  # Affichage en format monétaire\n        sep = \",\"\n      ),\n      selectInput(\n        inputId = \"color\",\n        label = \"Choisir une couleur\",\n        choices = c(\"Toutes\",sort(unique(as.character(diamonds$color)))), \n        selected = \"Toutes\"\n      )\n    ),\n    mainPanel(\n      plotlyOutput(outputId = \"DiamondPlot\"), \n      DTOutput(outputId = \"DiamondTable\")\n    )\n  )\n)\n\n\nserver <- function(input, output, session) {\n  \n  # Vérifier ce que contient la colonne \"color\"\n  observe({\n    print(unique(diamonds$color))  # Debugging pour voir les vraies valeurs\n  })\n  # Notification lors du changement de filtre\n  observeEvent(input$Price, {\n    showNotification(\n      paste(\"Filtrage par prix :\", input$Price[1], \"à\", input$Price[2]),\n      type = \"message\",\n      duration = 3\n    )\n  })\n  \n  observeEvent(input$color, {\n    showNotification(\n      paste(\"Couleur sélectionnée :\", input$color),\n      type = \"message\",\n      duration = 3\n    )\n  })\n  \n  \n  # Filtrer les données en fonction du prix et de la couleur\n  filtered_data <- reactive({\n    data <- diamonds %>%\n      filter(price >= input$Price[1], price <= input$Price[2])\n    \n    if (input$color != \"Toutes\") {\n      data <- data %>% filter(color == input$color)  \n    }\n    \n    return(data)\n  })\n  \n  # Table interactive\n  output$DiamondTable <- renderDT({\n    req(filtered_data()) \n    datatable(filtered_data())\n  })\n  \n  # Graphique interactif\n  output$DiamondPlot <- renderPlotly({\n    req(filtered_data())\n    \n    p <- ggplot(filtered_data(), aes(x = carat, y = price)) +\n      geom_point(alpha = 0.7, color = \"blue\") +  \n      labs(\n        title = paste(\"Diamants - Couleur:\", input$color),\n        x = \"Carats\",\n        y = \"Prix ($)\"\n      ) +\n      theme_minimal()\n    \n    ggplotly(p)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n","type":"text"},{"name":"Examen-shiny/Exament Shiny.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"},{"name":"Examen-shiny/index.html","content":"<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Exploration des Diamants<\/title>\n  <script type=\"module\">\n      import { WebR } from \"https://webr.r-wasm.org/latest/webr.mjs\";\n      const webr = new WebR();\n      await webr.init();\n  <\/script>\n<\/head>\n<body>\n  <h1>Exploration des Diamants avec Shiny Live<\/h1>\n  <div id=\"shiny-app\"><\/div>\n\n  <script type=\"module\">\n    import { WebR } from \"https://webr.r-wasm.org/latest/webr.mjs\";\n\n    async function startShiny() {\n      const webr = new WebR();\n      await webr.init();\n\n      await webr.evalR(`\n        library(shiny)\n        library(ggplot2)\n        library(dplyr)\n        library(DT)\n        data(\"diamonds\")\n\n        ui <- fluidPage(\n          titlePanel(\"Exploration des Diamants\"),\n          sidebarLayout(\n            sidebarPanel(\n              sliderInput(\"Price\", \"Prix des Diamants\", min(diamonds$price), max(diamonds$price), value = c(min(diamonds$price), 5000), step = 100),\n              selectInput(\"color\", \"Choisir une couleur\", choices = c(\"Toutes\", unique(diamonds$color)), selected = \"Toutes\")\n            ),\n            mainPanel(\n              plotOutput(\"DiamondPlot\"),\n              DTOutput(\"DiamondTable\")\n            )\n          )\n        )\n\n        server <- function(input, output) {\n          filtered_data <- reactive({\n            data <- diamonds %>%\n              filter(price >= input$Price[1], price <= input$Price[2])\n            if (input$color != \"Toutes\") {\n              data <- data %>% filter(color == input$color)\n            }\n            return(data)\n          })\n\n          output$DiamondTable <- renderDT({ datatable(filtered_data()) })\n\n          output$DiamondPlot <- renderPlot({\n            ggplot(filtered_data(), aes(x = carat, y = price)) +\n              geom_point(alpha = 0.7, color = \"blue\") +\n              labs(title = paste(\"Diamants - Couleur:\", input$color), x = \"Carats\", y = \"Prix ($)\") +\n              theme_minimal()\n          })\n        }\n\n        shinyApp(ui, server)\n      `);\n    }\n\n    startShiny();\n  <\/script>\n<\/body>\n<\/html>\n\n","type":"text"},{"name":"Examen-shiny/test","content":"\n","type":"text"},{"name":"Examen-shiny/test.R","content":"library(shiny)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DT)\nlibrary(bslib)\nlibrary(thematic)\nlibrary(plotly)\n\ndata(\"diamonds\")\n\nthematic_shiny()\n\nui <- fluidPage(\n  theme = bs_theme(\n    version = 5,\n    bootswatch = \"quartz\"\n  ),\n  titlePanel(\"Exploration des Diamants\"),\n  sidebarLayout(\n    sidebarPanel(\n      h2(\"Filtres\"),\n      sliderInput(\n        inputId = \"Price\",\n        label = \"Prix des Diamants\",\n        min = min(diamonds$price),\n        max = max(diamonds$price),\n        value = c(min(diamonds$price), 5000)\n      ),\n      sliderInput(\n        inputId = \"carat\",\n        label = \"Carats\",\n        min = min(diamonds$carat),\n        max = max(diamonds$carat),\n        value = c(min(diamonds$carat), 2)\n      ),\n      selectInput(\n        inputId = \"color\",\n        label = \"Choisir une couleur\",\n        choices = c(\"Toutes\", unique(diamonds$color)),  # Ajout du choix \"Toutes\"\n        selected = \"Toutes\"\n      ),\n      actionButton(\n        inputId = \"bouton\",\n        label = \"Appliquer le filtre\"\n      )\n    ),\n    mainPanel(\n      plotlyOutput(outputId = \"DiamondPlot\"), \n      DTOutput(outputId = \"DiamondTable\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  \n  # Filtrage réactif basé sur les inputs\n  filtered_data <- reactive({\n    data <- diamonds %>%\n      filter(price >= input$Price[1], price <= input$Price[2]) %>%\n      filter(carat >= input$carat[1], carat <= input$carat[2])\n    \n    # Appliquer le filtre sur la couleur\n    if (input$color != \"Toutes\") {\n      data <- data %>% filter(color == input$color)\n    }\n    \n    return(data)\n  })\n  \n  # Table interactive\n  output$DiamondTable <- renderDT({\n    req(filtered_data()) \n    datatable(filtered_data())\n  })\n  \n  # Graphique interactif avec plotly\n  output$DiamondPlot <- renderPlotly({\n    req(filtered_data())\n    \n    p <- ggplot(filtered_data(), aes(x = carat, y = price, color = cut)) +\n      geom_point(alpha = 0.5) +\n      labs(\n        title = \"Relation entre Carat et Prix\",\n        x = \"Carats\",\n        y = \"Prix ($)\"\n      ) +\n      theme_minimal()\n    \n    ggplotly(p)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n  \n \n  \n  # Graphique interactif avec plotly\n  output$DiamondPlot <- renderPlotly({\n    req(filtered_data())\n    \n    p <- ggplot(filtered_data(), aes(x = carat, y = price, color = cut)) +\n      geom_point(alpha = 0.5) +\n      labs(\n        title = \"Relation entre Carat et Prix\",\n        x = \"Carats\",\n        y = \"Prix ($)\"\n      ) +\n      theme_minimal()\n    \n    ggplotly(p)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n","type":"text"},{"name":"Exament Shiny.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"},{"name":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\"/>\n<style>body{background-color:white;}<\/style>\n\n\n<\/head>\n<body>\n<iframe data-deferred-src=\"appaaba1e246431a1b2ed84774f600323f9/?w=&amp;__subapp__=1\" width=\"100%\" height=\"400\" class=\"shiny-frame shiny-frame-deferred\"><\/iframe>\n<\/body>\n<\/html>\n","type":"text"},{"name":"test","content":"\n","type":"text"},{"name":"test.R","content":"library(shiny)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DT)\nlibrary(bslib)\nlibrary(thematic)\nlibrary(plotly)\n\ndata(\"diamonds\")\n\nthematic_shiny()\n\nui <- fluidPage(\n  theme = bs_theme(\n    version = 5,\n    bootswatch = \"quartz\"\n  ),\n  titlePanel(\"Exploration des Diamants\"),\n  sidebarLayout(\n    sidebarPanel(\n      h2(\"Filtres\"),\n      sliderInput(\n        inputId = \"Price\",\n        label = \"Prix des Diamants\",\n        min = min(diamonds$price),\n        max = max(diamonds$price),\n        value = c(min(diamonds$price), 5000)\n      ),\n      sliderInput(\n        inputId = \"carat\",\n        label = \"Carats\",\n        min = min(diamonds$carat),\n        max = max(diamonds$carat),\n        value = c(min(diamonds$carat), 2)\n      ),\n      selectInput(\n        inputId = \"color\",\n        label = \"Choisir une couleur\",\n        choices = c(\"Toutes\", unique(diamonds$color)),  # Ajout du choix \"Toutes\"\n        selected = \"Toutes\"\n      ),\n      actionButton(\n        inputId = \"bouton\",\n        label = \"Appliquer le filtre\"\n      )\n    ),\n    mainPanel(\n      plotlyOutput(outputId = \"DiamondPlot\"), \n      DTOutput(outputId = \"DiamondTable\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  \n  # Filtrage réactif basé sur les inputs\n  filtered_data <- reactive({\n    data <- diamonds %>%\n      filter(price >= input$Price[1], price <= input$Price[2]) %>%\n      filter(carat >= input$carat[1], carat <= input$carat[2])\n    \n    # Appliquer le filtre sur la couleur\n    if (input$color != \"Toutes\") {\n      data <- data %>% filter(color == input$color)\n    }\n    \n    return(data)\n  })\n  \n  # Table interactive\n  output$DiamondTable <- renderDT({\n    req(filtered_data()) \n    datatable(filtered_data())\n  })\n  \n  # Graphique interactif avec plotly\n  output$DiamondPlot <- renderPlotly({\n    req(filtered_data())\n    \n    p <- ggplot(filtered_data(), aes(x = carat, y = price, color = cut)) +\n      geom_point(alpha = 0.5) +\n      labs(\n        title = \"Relation entre Carat et Prix\",\n        x = \"Carats\",\n        y = \"Prix ($)\"\n      ) +\n      theme_minimal()\n    \n    ggplotly(p)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n  \n \n  \n  # Graphique interactif avec plotly\n  output$DiamondPlot <- renderPlotly({\n    req(filtered_data())\n    \n    p <- ggplot(filtered_data(), aes(x = carat, y = price, color = cut)) +\n      geom_point(alpha = 0.5) +\n      labs(\n        title = \"Relation entre Carat et Prix\",\n        x = \"Carats\",\n        y = \"Prix ($)\"\n      ) +\n      theme_minimal()\n    \n    ggplotly(p)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n","type":"text"},{"name":"testhtml.html","content":"library(shiny)\nlibrary(htmltools)\n\n# Ton code Shiny ici (utilise ton propre fichier app.R)\nui <- fluidPage(\n  titlePanel(\"Exploration des Diamants\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\n        inputId = \"Price\",\n        label = \"Prix des Diamants\",\n        min = 100,\n        max = 15000,\n        value = c(100, 5000),\n        step = 100,\n        pre = \"$\"\n      )\n    ),\n    mainPanel(\n      plotOutput(outputId = \"DiamondPlot\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  output$DiamondPlot <- renderPlot({\n    hist(rnorm(100))\n  })\n}\n\napp <- shinyApp(ui = ui, server = server)\n\n# Générer le fichier HTML statique\nsave_html(app, file = \"index.html\")\n","type":"text"}]
